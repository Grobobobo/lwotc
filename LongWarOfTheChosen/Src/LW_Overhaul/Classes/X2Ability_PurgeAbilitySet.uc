class X2Ability_PurgeAbilitySet extends X2Ability config(PurgePriests);

//Purge Bolt
var config int                     PURGE_DAMAGE_PER_TICK;
var config int                     PURGE_SPREAD_PER_TICK;
var config int                     PURGE_FLAME_APPLY_CHANCE;
var config int                     PURGE_BOLT_COOLDOWN;
var config int                     PURGE_BOLT_COOLDOWN_GLOBAL;
//Purge Cascade
var config int                     PURGE_CASCADE_COOLDOWN;
var config int                     PURGE_CASCADE_COOLDOWN_GLOBAL;
//Blazing Storm
var config int                     BLAZING_STORM_COOLDOWN;
var config int                     BLAZING_STORM_COOLDOWN_GLOBAL;
//Melting Stream
var config int                     MELTING_STREAM_COOLDOWN;
//Jail
var config int                     JAIL_COOLDOWN;
var config int                     JAIL_COOLDOWN_GLOBAL;
//Mass Jail
var config int                     MASS_JAIL_COOLDOWN;
var config int                     MASS_JAIL_RANGE;
var config int                     MASS_JAIL_RADIUS;
var config int                     MASS_JAIL_COOLDOWN_GLOBAL;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(PurgeVolt());
	Templates.AddItem(PurgeCascade());
	Templates.AddItem(PurgeFocus());
	Templates.AddItem(PurgingFocus());
	Templates.AddItem(BlazingFocus());
	Templates.AddItem(ExaltedFocus());
	Templates.AddItem(ApocalypticFocus());
	Templates.AddItem(MeltingStream('MeltingStream'));
	Templates.AddItem(BlazingStorm());
	Templates.AddItem(PlasmaResistance());
	Templates.AddItem(MeltingAura());
	Templates.AddItem(MeltingAuraAttack());
	Templates.AddItem(ScorchingTouch());
	Templates.AddItem(Jail());
	Templates.AddItem(MassJail());
	Templates.AddItem(SuperHeated());
	Templates.AddItem(FlameControl());

	return Templates;
}

static function X2AbilityTemplate PurgeVolt()
{
	local X2AbilityTemplate				        Template;
	local X2AbilityCost_ActionPoints	        ActionPointCost;
	local X2Condition_UnitProperty		        TargetCondition;
	local X2Effect_ApplyWeaponDamage	        DamageEffect;
	local X2Effect_Burning                      BurningEffect;
	//local X2AbilityCooldown				        Cooldown;
	local X2AbilityCooldown_LocalAndGlobal      Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'PurgeVolt');

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.PURGE_BOLT_COOLDOWN;
	//Template.AbilityCooldown = Cooldown;

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.PURGE_BOLT_COOLDOWN;
	Cooldown.NumGlobalTurns = default.PURGE_BOLT_COOLDOWN_GLOBAL;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityMultiTargetStyle = new class'X2AbilityMultiTarget_Volt';
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	//	NOTE: visibility is NOT required for multi targets as it is required between each target (handled by multi target class)

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = false;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeCivilian = true;
	TargetCondition.ExcludeCosmetic = true;
	TargetCondition.ExcludeRobotic = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityMultiTargetConditions.AddItem(TargetCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludePsionic = false;
	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bIgnoreBaseDamage = true;
	DamageEffect.DamageTag = 'PurgeVolt';
	DamageEffect.bIgnoreArmor = true;
	DamageEffect.TargetConditions.AddItem(TargetCondition);
	Template.AddTargetEffect(DamageEffect);
	Template.AddMultiTargetEffect(DamageEffect);

	BurningEffect = class'X2StatusEffects'.static.CreateBurningStatusEffect(default.PURGE_DAMAGE_PER_TICK, default.PURGE_SPREAD_PER_TICK);
	BurningEffect.ApplyChance = default.PURGE_FLAME_APPLY_CHANCE;
	Template.AddTargetEffect(BurningEffect);
	Template.AddMultiTargetEffect(BurningEffect);
	

//BEGIN AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.CustomFireAnim = 'HL_PurgingVolt';
	Template.ActivationSpeech = 'Volt';
//END AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Purge_Bolt";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_SQUADDIE_PRIORITY;
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	Template.TargetingMethod = class'X2TargetingMethod_Volt';
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.ActionFireClass = class'X2Action_PurgingVolt';
	
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;

	return Template;
}


static function X2AbilityTemplate PurgeCascade()
{
	local X2AbilityTemplate				        Template;
	local X2AbilityCost_ActionPoints	        ActionPointCost;
	local X2Condition_UnitProperty		        TargetCondition;
	local X2Effect_ApplyWeaponDamage	        DamageEffect;
	local X2Effect_Burning                      BurningEffect;
	//local X2AbilityCooldown				        Cooldown;
	local X2AbilityCooldown_LocalAndGlobal      Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'PurgeCascade');

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.PURGE_CASCADE_COOLDOWN;
	//Template.AbilityCooldown = Cooldown;

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.PURGE_CASCADE_COOLDOWN;
	Cooldown.NumGlobalTurns = default.PURGE_CASCADE_COOLDOWN_GLOBAL;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityMultiTargetStyle = new class'X2AbilityMultiTarget_Volt';
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	//	NOTE: visibility is NOT required for multi targets as it is required between each target (handled by multi target class)

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = false;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeCivilian = true;
	TargetCondition.ExcludeCosmetic = true;
	TargetCondition.ExcludeRobotic = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityMultiTargetConditions.AddItem(TargetCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludePsionic = false;
	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	DamageEffect.bIgnoreBaseDamage = true;
	DamageEffect.DamageTag = 'PurgeVolt';
	DamageEffect.bIgnoreArmor = true;
	DamageEffect.TargetConditions.AddItem(TargetCondition);
	Template.AddTargetEffect(DamageEffect);
	Template.AddMultiTargetEffect(DamageEffect);

	BurningEffect = class'X2StatusEffects'.static.CreateBurningStatusEffect(default.PURGE_DAMAGE_PER_TICK, default.PURGE_SPREAD_PER_TICK);
	BurningEffect.ApplyChance = default.PURGE_FLAME_APPLY_CHANCE;
	Template.AddTargetEffect(BurningEffect);
	Template.AddMultiTargetEffect(BurningEffect);
	

//BEGIN AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.CustomFireAnim = 'HL_PurgeCascade';
	Template.ActivationSpeech = 'Volt';
//END AUTOGENERATED CODE: Template Overrides 'Volt'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Purge_Bolt";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_SQUADDIE_PRIORITY;
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	Template.TargetingMethod = class'X2TargetingMethod_Volt';
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.ActionFireClass = class'X2Action_PurgeCascade';
	
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;

	return Template;
}

static function X2AbilityTemplate PurgeFocus()
{
	local X2AbilityTemplate Template;
	local X2Effect_ModifyTemplarFocus FocusEffect;

	Template = PurePassive('PurgeFocus', "img:///WoTC_PurgePriest_UI.UIPerk_Purge_Focus", false, 'eAbilitySource_Psionic');

	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Purge_Focus";
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Defensive;
	Template.bIsPassive = true;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	Template.AddTargetEffect(new class'X2Effect_TemplarFocus');

	FocusEffect = new class'X2Effect_ModifyTemplarFocus';
	FocusEffect.ModifyFocus = 6;
	Template.AddTargetEffect(FocusEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	// Note: no visualization on purpose!

	return Template;
}

static function X2AbilityTemplate PurgingFocus()
{
	return PurePassive('PurgingFocus', "img:///WoTC_PurgePriest_UI.UIPerk_Purging_Focus", , 'eAbilitySource_Psionic', true);
}

static function X2AbilityTemplate BlazingFocus()
{
	return PurePassive('BlazingFocus', "img:///WoTC_PurgePriest_UI.UIPerk_Blazing_Focus", , 'eAbilitySource_Psionic', true);
}

static function X2AbilityTemplate ExaltedFocus()
{
	return PurePassive('ExaltedFocus', "img:///WoTC_PurgePriest_UI.UIPerk_Exalted_Focus", , 'eAbilitySource_Psionic', true);
}

static function X2AbilityTemplate ApocalypticFocus()
{
	return PurePassive('ApocalypticFocus', "img:///WoTC_PurgePriest_UI.UIPerk_Apocalyptic_Focus", , 'eAbilitySource_Psionic', true);
}

static function X2AbilityTemplate BlazingStorm()
{
	local X2AbilityTemplate                            Template;
	local X2AbilityCost_ActionPoints                   ActionPointCost;
	local X2Effect_ApplyWeaponDamage                   WeaponDamageEffect;
	local X2AbilityTarget_Cursor                       CursorTarget;
	local X2AbilityMultiTarget_Cone                    ConeMultiTarget;
	local X2Condition_UnitProperty                     UnitPropertyCondition;
	local X2AbilityTrigger_PlayerInput                 InputTrigger;
	local X2AbilityToHitCalc_StandardAim               StandardAim;
	local X2Effect_ApplyDirectionalWorldDamage         WorldDamage;
	local X2Effect_ApplyFireToWorld                    FireToWorldEffect;
	//local X2AbilityCooldown				               Cooldown;
	local X2AbilityCooldown_LocalAndGlobal             Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'BlazingStorm');
	
	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	Template.AbilityCosts.AddItem(ActionPointCost);

	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.BLAZING_STORM_COOLDOWN;
	//Template.AbilityCooldown = Cooldown;

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.BLAZING_STORM_COOLDOWN;
	Cooldown.NumGlobalTurns = default.BLAZING_STORM_COOLDOWN_GLOBAL;
	Template.AbilityCooldown = Cooldown;
	
	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.bExplosiveDamage = false;
	WeaponDamageEffect.EnvironmentalDamageAmount = 15;
	WeaponDamageEffect.bApplyWorldEffectsForEachTargetLocation = false;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	FireToWorldEffect = new class'X2Effect_ApplyFireToWorld';
	FireToWorldEffect.bUseFireChanceLevel = true;
	FireToWorldEffect.bDamageFragileOnly = false;
	FireToWorldEffect.FireChance_Level1 = 0;
	FireToWorldEffect.FireChance_Level2 = 0.25;
	FireToWorldEffect.FireChance_Level3 = 0.40;
	FireToWorldEffect.bCheckForLOSFromTargetLocation = true;
	Template.AddMultiTargetEffect(FireToWorldEffect);

	WorldDamage = new class'X2Effect_ApplyDirectionalWorldDamage';
	WorldDamage.bUseWeaponDamageType = true;
	WorldDamage.bUseWeaponEnvironmentalDamage = false;
	WorldDamage.EnvironmentalDamageAmount = 15;
	WorldDamage.bApplyOnHit = true;
    WorldDamage.bApplyOnMiss = true;
	WorldDamage.bApplyToWorldOnHit = true;
	WorldDamage.bApplyToWorldOnMiss = true;
	WorldDamage.bHitAdjacentDestructibles = true;
	WorldDamage.PlusNumZTiles = 2;
	WorldDamage.bHitTargetTile = true;
	WorldDamage.ApplyChance = 100;
	Template.AddTargetEffect(WorldDamage);
	
	CursorTarget = new class'X2AbilityTarget_Cursor';
	Template.AbilityTargetStyle = CursorTarget;
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.ARMOR_ACTIVE_PRIORITY;

    ConeMultiTarget = new class'X2AbilityMultiTarget_Cone';
	ConeMultiTarget.bUseWeaponRadius = false;
	ConeMultiTarget.ConeEndDiameter = 15 * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = 15 * class'XComWorldData'.const.WORLD_StepSize;
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	Template.AbilityShooterConditions.AddItem(UnitPropertyCondition);

	Template.AddShooterEffectExclusions();

	InputTrigger = new class'X2AbilityTrigger_PlayerInput';
	Template.AbilityTriggers.AddItem(InputTrigger);
	
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_WrongSoldierClass');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Blazing_Storm";

	Template.bCheckCollision = false;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = true;

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;

	Template.CustomFireAnim = 'HL_BlazingStorm';
	//Template.CinescriptCameraType = "Soldier_HeavyWeapons";
	//BEGIN AUTOGENERATED CODE: Template Overrides 'Flamethrower'
	//BEGIN AUTOGENERATED CODE: Template Overrides 'FlamethrowerMk2'	
	Template.bFrameEvenWhenUnitIsHidden = true;	
	//END AUTOGENERATED CODE: Template Overrides 'FlamethrowerMk2'
	//END AUTOGENERATED CODE: Template Overrides 'Flamethrower'

	return Template;	
}

static function X2AbilityTemplate MeltingStream(name TemplateName)
{
	local X2AbilityTemplate                            Template;
	local X2AbilityCost_ActionPoints                   ActionPointCost;
	local X2Effect_ApplyWeaponDamage                   WeaponDamageEffect;
	local X2AbilityTarget_Cursor                       CursorTarget;
	local X2AbilityMultiTarget_Cone                    ConeMultiTarget;
	local X2Condition_UnitProperty                     UnitPropertyCondition;
	local X2AbilityTrigger_PlayerInput                 InputTrigger;
	local X2AbilityToHitCalc_StandardAim               StandardAim;
	local X2Effect_ApplyDirectionalWorldDamage         WorldDamage;
	local X2Effect_Panicked                            PanickedEffect;
	local X2AbilityCooldown				               Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);
	
	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = default.MELTING_STREAM_COOLDOWN;
	Template.AbilityCooldown = Cooldown;
	
	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.bExplosiveDamage = false;
	WeaponDamageEffect.EnvironmentalDamageAmount = 50;
	WeaponDamageEffect.bApplyWorldEffectsForEachTargetLocation = true;

	Template.AddMultiTargetEffect(WeaponDamageEffect);
	Template.AddMultiTargetEffect(new class'X2Effect_ApplyFireToWorld');

	WorldDamage = new class'X2Effect_ApplyDirectionalWorldDamage';
	WorldDamage.bUseWeaponDamageType = true;
	WorldDamage.bUseWeaponEnvironmentalDamage = false;
	WorldDamage.EnvironmentalDamageAmount = 50;
	WorldDamage.bApplyOnHit = true;
    WorldDamage.bApplyOnMiss = true;
	WorldDamage.bApplyToWorldOnHit = true;
	WorldDamage.bApplyToWorldOnMiss = true;
	WorldDamage.bHitAdjacentDestructibles = true;
	WorldDamage.PlusNumZTiles = 2;
	WorldDamage.bHitTargetTile = true;
	WorldDamage.ApplyChance = 100;
	Template.AddTargetEffect(WorldDamage);
	
	CursorTarget = new class'X2AbilityTarget_Cursor';
	Template.AbilityTargetStyle = CursorTarget;
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.ARMOR_ACTIVE_PRIORITY;

    ConeMultiTarget = new class'X2AbilityMultiTarget_Cone';
	ConeMultiTarget.bUseWeaponRadius = false;
	ConeMultiTarget.ConeEndDiameter = 5 * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = 20 * class'XComWorldData'.const.WORLD_StepSize;
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	Template.AbilityShooterConditions.AddItem(UnitPropertyCondition);

	Template.AddShooterEffectExclusions();

	InputTrigger = new class'X2AbilityTrigger_PlayerInput';
	Template.AbilityTriggers.AddItem(InputTrigger);
	
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_WrongSoldierClass');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Melting_Stream";

	Template.bCheckCollision = false;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	PanickedEffect = class'X2StatusEffects'.static.CreatePanickedStatusEffect();
	Template.AddTargetEffect(PanickedEffect);
	Template.AddMultiTargetEffect(PanickedEffect);

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;

	//BEGIN AUTOGENERATED CODE: Template Overrides 'Flamethrower'
	//BEGIN AUTOGENERATED CODE: Template Overrides 'FlamethrowerMk2'	
	Template.bFrameEvenWhenUnitIsHidden = true;	
	//END AUTOGENERATED CODE: Template Overrides 'FlamethrowerMk2'
	//END AUTOGENERATED CODE: Template Overrides 'Flamethrower'

	return Template;	
}

static function X2AbilityTemplate PlasmaResistance()
{
	local X2AbilityTemplate                  Template;
	local X2AbilityTrigger                   Trigger;
	local X2Effect_PlasmaResistance          PlasmaAdjust;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'PlasmaResistance');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Plasma_Resistance";

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Defensive;

	// This ability will only be targeting the unit it is on
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	// Triggers at the start of the tactical
	Trigger = new class'X2AbilityTrigger_UnitPostBeginPlay';
	Template.AbilityTriggers.AddItem(Trigger);

	PlasmaAdjust = new class'X2Effect_PlasmaResistance';
	PlasmaAdjust.BuildPersistentEffect(1, true, true, true);
	PlasmaAdjust.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage, , , Template.AbilitySourceName);
	Template.AddTargetEffect(PlasmaAdjust);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

//This is the one that gets added to the weapon template
static function X2AbilityTemplate MeltingAura()
{
	local X2AbilityTemplate                 Template;

	// Pure passive, most of the functionality is in the additional ability
	Template = PurePassive('MeltingAura', "img:///WoTC_PurgePriest_UI.UIPerk_Melting_Aura", false, 'eAbilitySource_Psionic');
	Template.AdditionalAbilities.AddItem('MeltingAuraAttack');

	return Template;
}

static function X2AbilityTemplate MeltingAuraAttack()
{
	local X2AbilityTemplate								Template;
	local X2AbilityToHitCalc_StandardAim				ToHitCalc;
	local X2AbilityTrigger_Event						Trigger;
	local X2Effect_Persistent							MeltingAuraTargetEffect;
	local X2Condition_UnitEffectsWithAbilitySource		MeltingAuraTargetCondition;
	local X2AbilityTrigger_EventListener				EventListener;
	local X2Condition_UnitProperty						SourceNotConcealedCondition;
	local X2Condition_Visibility						TargetVisibilityCondition;
	local X2AbilityTarget_MeltingAura			        SingleTarget;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'MeltingAuraAttack');

	// Boilerplate setup
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Melting_Aura";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.CLASS_CAPTAIN_PRIORITY;
	Template.Hostility = eHostility_Defensive;
	Template.bCrossClassEligible = false;

	// Standard aim calculation
	ToHitCalc = new class'X2AbilityToHitCalc_StandardAim';
	ToHitCalc.bReactionFire = true;
	Template.AbilityToHitCalc = ToHitCalc;
	
	// Trigger on movement
	Trigger = new class'X2AbilityTrigger_Event';
	Trigger.EventObserverClass = class'X2TacticalGameRuleset_MovementObserver';
	Trigger.MethodName = 'InterruptGameState';
	Template.AbilityTriggers.AddItem(Trigger);
	Trigger = new class'X2AbilityTrigger_Event';
	Trigger.EventObserverClass = class'X2TacticalGameRuleset_MovementObserver';
	Trigger.MethodName = 'PostBuildGameState';
	Template.AbilityTriggers.AddItem(Trigger);


	// It may be the case that enemy movement caused a concealment break, which made Bladestorm applicable - attempt to trigger afterwards
	EventListener = new class'X2AbilityTrigger_EventListener';
	EventListener.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventListener.ListenerData.EventID = 'UnitConcealmentBroken';
	EventListener.ListenerData.Filter = eFilter_Unit;
	EventListener.ListenerData.EventFn = MeltingAuraConcealmentListener;
	EventListener.ListenerData.Priority = 55;
	Template.AbilityTriggers.AddItem(EventListener);
	
	// Special target conditions
	Template.AbilityTargetConditions.AddItem(default.LivingHostileUnitDisallowMindControlProperty);
	TargetVisibilityCondition = new class'X2Condition_Visibility';
	TargetVisibilityCondition.bRequireGameplayVisible = true;
	TargetVisibilityCondition.bRequireBasicVisibility = true;
	TargetVisibilityCondition.bDisablePeeksOnMovement = true; //Don't use peek tiles for over watch shots	
	Template.AbilityTargetConditions.AddItem(TargetVisibilityCondition);
	Template.AbilityTargetConditions.AddItem(class'X2Ability_DefaultAbilitySet'.static.OverwatchTargetEffectsCondition());

	// Don't trigger while disoriented, burning, etc.
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);	
	Template.AddShooterEffectExclusions();

	// Don't trigger when the source is concealed
	SourceNotConcealedCondition = new class'X2Condition_UnitProperty';
	SourceNotConcealedCondition.ExcludeConcealed = true;
	Template.AbilityShooterConditions.AddItem(SourceNotConcealedCondition);

	// Effect that limits the range of the reaction shot
	SingleTarget = new class 'X2AbilityTarget_MeltingAura';
	Template.AbilityTargetStyle = SingleTarget;

	// Can shred and apply ammo effects
	Template.bAllowBonusWeaponEffects = true;
	Template.AddTargetEffect(class 'X2Ability_GrenadierAbilitySet'.static.ShredderDamageEffect());

	// Prevent repeatedly hammering on a unit when CCS triggers.
	// (This effect does nothing, but enables many-to-many marking of which CCS attacks have already occurred each turn.)
	MeltingAuraTargetEffect = new class'X2Effect_Persistent';
	MeltingAuraTargetEffect.BuildPersistentEffect(1, false, true, true, eGameRule_PlayerTurnEnd);
	MeltingAuraTargetEffect.EffectName = 'MeltingAuraTarget';
	MeltingAuraTargetEffect.bApplyOnMiss = true; //Only one chance, even if you miss (prevents crazy flailing counter-attack chains with a Muton, for example)
	Template.AddTargetEffect(MeltingAuraTargetEffect);

	MeltingAuraTargetCondition = new class'X2Condition_UnitEffectsWithAbilitySource';
	MeltingAuraTargetCondition.AddExcludeEffect('MeltingAuraTarget', 'AA_DuplicateEffectIgnored');
	Template.AbilityTargetConditions.AddItem(MeltingAuraTargetCondition);

	// Visualization
	Template.CinescriptCameraType = "MEC_MicroMissiles";
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bShowActivation = true;

	// Standard interactions with Shadow, Chosen, and the Lost
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.MeleeLostSpawnIncreasePerUse;

	Template.CustomFireAnim = 'HL_MeltingAura';

	//Template.FrameAbilityCameraType = eCameraFraming_Never;


	return Template;
}

// Must be static, because it will be called with a different object (an XComGameState_Ability)
// Used to trigger Bladestorm when the source's concealment is broken by a unit in melee range (the regular movement triggers get called too soon)
static function EventListenerReturn MeltingAuraConcealmentListener(Object EventData, Object EventSource, XComGameState GameState, Name EventID, Object CallbackData)
{
	local XComGameStateContext_Ability                AbilityContext;
	local XComGameState_Unit                          ConcealmentBrokenUnit;
	local StateObjectReference                        MeltingAuraRef;
	local XComGameState_Ability                       MeltingAuraState;
	local XComGameStateHistory                        History;

	History = `XCOMHISTORY;

	ConcealmentBrokenUnit = XComGameState_Unit(EventSource);	
	if (ConcealmentBrokenUnit == None)
		return ELR_NoInterrupt;

	//Do not trigger if the CloseCombatSpecialist soldier himself moved to cause the concealment break - only when an enemy moved and caused it.
	AbilityContext = XComGameStateContext_Ability(GameState.GetContext().GetFirstStateInEventChain().GetContext());
	if (AbilityContext != None && AbilityContext.InputContext.SourceObject != ConcealmentBrokenUnit.ConcealmentBrokenByUnitRef)
		return ELR_NoInterrupt;

	MeltingAuraRef = ConcealmentBrokenUnit.FindAbility('MeltingAuraAttack');
	if (MeltingAuraRef.ObjectID == 0)
		return ELR_NoInterrupt;

	MeltingAuraState = XComGameState_Ability(History.GetGameStateForObjectID(MeltingAuraRef.ObjectID));
	if (MeltingAuraState == None)
		return ELR_NoInterrupt;
	
	MeltingAuraState.AbilityTriggerAgainstSingleTarget(ConcealmentBrokenUnit.ConcealmentBrokenByUnitRef, false);
	return ELR_NoInterrupt;
}


static function X2AbilityTemplate ScorchingTouch()
{
	local X2AbilityTemplate						Template;
	local X2Effect_ApplyWeaponDamage            DamageEffect;
	local X2AbilityTrigger_EventListener        EventTrigger;

	Template = PurePassive('ScorchingTouch', "img:///WoTC_PurgePriest_UI.UIPerk_Scorching_Touch", false, 'eAbilitySource_Psionic');

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Defensive;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Scorching_Touch";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AbilityTargetConditions.AddItem(default.LivingHostileTargetProperty);

	DamageEffect = new class'X2Effect_ApplyWeaponDamage';
	Template.AddTargetEffect(DamageEffect);

	EventTrigger = new class'X2AbilityTrigger_EventListener';
	EventTrigger.ListenerData.EventID = 'AbilityActivated';
	EventTrigger.ListenerData.Filter = eFilter_None;
	EventTrigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventTrigger.ListenerData.EventFn = class'XComGameState_Ability'.static.ScorchCircuits_AbilityActivated;
	Template.AbilityTriggers.AddItem(EventTrigger);

	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.FrameAbilityCameraType = eCameraFraming_Never;
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	return Template;
}

static function X2AbilityTemplate Jail()
{
	local X2AbilityTemplate                  Template;
	local X2AbilityCost_ActionPoints	     ActionPointCost;
	local X2Condition_UnitProperty		     TargetCondition;
	//local X2AbilityCooldown				     Cooldown;
	local X2AbilityCooldown_LocalAndGlobal   Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Jail');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Jail";

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Jail";
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.JAIL_COOLDOWN;
	//Template.AbilityCooldown = Cooldown;

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.JAIL_COOLDOWN;
	Cooldown.NumGlobalTurns = default.JAIL_COOLDOWN_GLOBAL;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.AbilityTargetConditions.AddItem(new class'X2Condition_StasisTarget');
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = false;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeCivilian = true;
	TargetCondition.ExcludeCosmetic = true;
	TargetCondition.ExcludeRobotic = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityMultiTargetConditions.AddItem(TargetCondition);

	Template.AddShooterEffectExclusions();

	Template.AddTargetEffect(class'X2StatusEffect_Jail'.static.CreateJailStatusEffect());

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	Template.CustomFireAnim = 'HL_Jail';

	return Template;
}


static function X2AbilityTemplate MassJail()
{
	local X2AbilityTemplate                  Template;
	local X2AbilityCost_ActionPoints	     ActionPointCost;
	local X2Condition_UnitProperty		     TargetCondition;
	local X2AbilityMultiTarget_Radius        RadiusMultiTarget;
	local X2AbilityTarget_Cursor             CursorTarget;
	//local X2AbilityCooldown					 Cooldown;
	local X2AbilityCooldown_LocalAndGlobal   Cooldown;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'MassJail');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Jail";

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;
	Template.Hostility = eHostility_Offensive;
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Jail";
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	//Cooldown = new class'X2AbilityCooldown';
	//Cooldown.iNumTurns = default.MASS_JAIL_COOLDOWN;
	//Template.AbilityCooldown = Cooldown;

	Cooldown = new class'X2AbilityCooldown_LocalAndGlobal';
	Cooldown.iNumTurns = default.MASS_JAIL_COOLDOWN;
	Cooldown.NumGlobalTurns = default.MASS_JAIL_COOLDOWN_GLOBAL;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	Template.TargetingMethod = class'X2TargetingMethod_RocketLauncher';

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToSquadsightRange = true;
	CursorTarget.FixedAbilityRange = default.MASS_JAIL_RANGE;
	Template.AbilityTargetStyle = CursorTarget;

	RadiusMultiTarget = new class'X2AbilityMultiTarget_Radius';
	RadiusMultiTarget.fTargetRadius = default.MASS_JAIL_RADIUS;
	RadiusMultiTarget.bIgnoreBlockingCover = true;
	Template.AbilityMultiTargetStyle = RadiusMultiTarget;

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeAlive = false;
	TargetCondition.ExcludeDead = true;
	TargetCondition.ExcludeFriendlyToSource = true;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.TreatMindControlledSquadmateAsHostile = true;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeCivilian = true;
	TargetCondition.ExcludeCosmetic = true;
	TargetCondition.ExcludeRobotic = false;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityMultiTargetConditions.AddItem(TargetCondition);

	Template.AddShooterEffectExclusions();

	Template.AddMultiTargetEffect(class'X2StatusEffect_Jail'.static.CreateJailStatusEffect());

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;

	Template.CustomFireAnim = 'HL_MassJail';

	return Template;
}

static function X2AbilityTemplate FlameControl()
{
	local X2AbilityTemplate                 Template;
	local X2Effect_DamageImmunity           DamageImmunity;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'FlameControl');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_Flame_Control";

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Defensive;
	//Template.bDisplayInUITacticalText = false;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);
	
	DamageImmunity = new class'X2Effect_DamageImmunity';
	DamageImmunity.ImmuneTypes.AddItem('Fire');
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.ParthenogenicPoisonType);
	DamageImmunity.BuildPersistentEffect(1, true, false, false);
	DamageImmunity.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName);
	Template.AddTargetEffect(DamageImmunity);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}


static function X2AbilityTemplate SuperHeated()
{
	local X2AbilityTemplate                 Template;
	local X2Effect_DamageImmunity           DamageImmunity;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'SuperHeated');
	Template.IconImage = "img:///WoTC_PurgePriest_UI.UIPerk_SuperHeated";

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Defensive;
	//Template.bDisplayInUITacticalText = false;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);
	
	DamageImmunity = new class'X2Effect_DamageImmunity';
	DamageImmunity.ImmuneTypes.AddItem('Acid');
	DamageImmunity.ImmuneTypes.AddItem('Frost');
	DamageImmunity.ImmuneTypes.AddItem('Fire');
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.ParthenogenicPoisonType);
	DamageImmunity.BuildPersistentEffect(1, true, false, false);
	DamageImmunity.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName);
	Template.AddTargetEffect(DamageImmunity);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}